<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_440354_cvrf_inte.CVRFSolutionIntegration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CVRFSolutionIntegration</name>
        <script><![CDATA[var CVRFSolutionIntegration = Class.create();
CVRFSolutionIntegration.prototype = Object.extendsObject(sn_vul.VulnerabilityIntegrationBase, {
	initialize: function () {
		//gs.info("CVRFSolutionIntegration intialized");
		this.domain = "";
		this.util = new CVRFUtil();
		this.yearMonth = "";
		this.CVRFUrl = "";
	},

	retrieveData: function () {
		gs.info("CVRFSolutionIntegration's retrieveData function called.");

		if (gs.getProperty('sn_vul.solutions_enabled', 'false') === 'false')
			throw new Error("The Solution Management for Vulnerability Response application is required to run this integration.");

		try {
			var integrationSysId = this.integrationGr.sys_id + "";
			this.integrationGr = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration");
			if (!this.integrationGr.get(integrationSysId))
				throw new Error("No CVRF integration found");
			this.domain = this.integrationGr.run_as.sys_domain + "";
			//this.util._determineWhichToImport(this.domain);

			var config = "";

			config = (new sn_sec_int.Implementation()).getConfiguration(this.integrationGr.instance + "");
			this.util._determineWhichToImport(config, this.domain);
			/*var config="default";
			var implGr = new GlideRecord("sn_sec_int_impl");
			implGr.addQuery("sys_domain", this.domain);
			implGr.addQuery("integration", "974cd6d52fb130101767d8ddf699b666");//this.INTEGRATION_SYS_ID);
			implGr.setLimit(1);
			implGr.query();
			if (implGr.next()) {
				var implSysId = implGr.getUniqueValue();
				// get the configuration for that specific domain's implementation (integration instance)
				config = (new sn_sec_int.Implementation()).getConfiguration(implSysId);
			}*/

			this._determineRunParameters();

			if (!this.yearMonth) {
				this.hasMoreData(false);
				var attach = new GlideSysAttachment();
				return {
					contentType: "sys_attachment",
					extension: "xml",
					contents: attach.write(
						this.integrationProcessGr,
						this.integrationGr.name + '_' + new GlideDateTime().toString() + '.xml',
						'xml', '{}'
					)
				};
			}

			config.solution_endpoint = this.CVRFUrl;

			gs.info(JSON.stringify(config));
			var fileName = this.integrationGr.name + "_" + this.yearMonth + "_" + new GlideDateTime().toString() + ".xml";
			var msg = this.util._buildRESTMessage(config);
			msg.saveResponseBodyAsAttachment(this.integrationProcessGr.getTableName(), this.integrationProcessGr.sys_id + "", fileName, null);
			gs.info(this.integrationProcessGr.getTableName() + " " + this.integrationProcessGr.sys_id + "");
			var resp = msg.execute();
			var statusCode = resp.getStatusCode();
			gs.info("CVRF Status code" + statusCode);
			//gs.info("CVRF body" + resp.getBody());
			if (statusCode != 200) {
				if (statusCode == 400) {
					gs.warn("Invalid response code received from RedHat: Bad Request " + statusCode);
					throw new Error("Invalid response code received from Red Hat: Bad Request " + statusCode);
				}
				if (statusCode == 401) {
					gs.warn("Invalid response code received from RedHat: Unauthorized " + statusCode + " The URL is incorrect.");
					throw new Error("Invalid response code received from Red Hat: Unauthorized " + statusCode + " The URL is incorrect");
				}
				if (statusCode == 404) {
					gs.warn("Invalid response code received from RedHat: Not Found " + statusCode + " The URL is incorrect.");
					throw new Error("Invalid response code received from Red Hat: Not Found " + statusCode + " The URL is incorrect");
				}
				if (statusCode == 500) {
					gs.warn("Invalid response code received from RedHat: Internal Server Error " + statusCode);
					throw new Error("Invalid response code received from Red Hat: Internal Server Error " + statusCode);
				}
				gs.warn("Invalid response code received from RedHat: " + statusCode);
				throw new Error("Invalid response code received from RedHat: " + statusCode);
			}
			var sys_id = resp.getResponseAttachmentSysid();
			var obj = {
				contents: sys_id,
				contentType: "sys_attachment",
				extension: "xml"
			};
			this._handlePagination();
			return obj;

		} catch (e) {
			gs.warn("[CVRF] Error when initializing: " + e.message);
			throw new Error("[CVRF] Error when initializing: " + e.message);
		}
	},

	_determineRunParameters: function () {
		var gr = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration_update");
		gr.addQuery("need_import", true);
		if (this.domain)
			gr.addQuery("sys_domain", this.domain);
		gr.orderBy("id");
		gr.query();
		if (gr.next()) {
			var id = gr.getValue("id");
			if (!gs.nil(id)) {
				this.yearMonth = id;
				this.CVRFUrl = gr.getValue("cvrf_url");
				gr.setValue("need_import", false);
				gr.update();
			} else {
				gs.warn("Empty ID found in sn_vul_msrc_update");
				throw new Error("Empty ID found in sn_vul_msrc_update");
			}
		}
	},

	_handlePagination: function () {
		var gr = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration_update");
		gr.addQuery("need_import", true);
		if (this.domain)
			gr.addQuery("sys_domain", this.domain);
		gr.orderBy("id");
		gr.query();
		if (gr.next()) {
			var id = gr.getValue("id");
			if (!gs.nil(id)) {
				this.hasMoreData(true);
				this.setNextRunParameters({
					nextYearMonth: id
				});
			} else {
				gs.warn("Empty ID found in sn_vul_msrc_update");
				throw new Error("Empty ID found in sn_vul_msrc_update");
			}
		} else {
			this.hasMoreData(false);
			var grStartDate = new GlideRecord("sn_sec_int_impl_config");
			grStartDate.addQuery("implementation", this.integrationGr.instance);
			grStartDate.addQuery("configuration", "8d93ff090702b010568cffa08c1ed0e4"); // start date
			grStartDate.query();
			grStartDate.next();

			var grEndDate = new GlideRecord("sn_sec_int_impl_config");
			grEndDate.addQuery("implementation", this.integrationGr.instance);
			grEndDate.addQuery("configuration", "eea373490702b010568cffa08c1ed0eb"); // end date
			grEndDate.query();
			grEndDate.next();


			grStartDate.value = grEndDate.value;
			grStartDate.update();
			grEndDate.value = new GlideDate().getDisplayValue();
			grEndDate.update();
		}
	},

	// _buildRESTMessage: function (config) {
	// 	var restMsg = new sn_ws.RESTMessageV2("CVRF Solutions", "Retrieve Solutions");
	// 	if (config.authenticationType == "BASIC_AUTH") {
	// 		restMsg.setBasicAuth(config.username, config.password);
	// 	} else if (config.authenticationType == "OAUTH_2.0") {

	// 		/*var outhProfile = new GlideRecord("oauth_entity");
	// 		//outhProfile.initialize();
	// 		outhProfile.get("4dc55ecd2f71f0101767d8ddf699b6fe");
	// 		outhProfile.name = "profile " + config.name;
	// 		outhProfile.sys_scope = "b0793e902fb130101767d8ddf699b6d4"; // property application scope

	// 		outhProfile.client_id = config.client_id;
	// 		outhProfile.client_secret = config.client_secret;
	// 		outhProfile.active = true;
	// 		outhProfile.auth_url = config.authorization_url;
	// 		outhProfile.token_url = config.token_url;
	// 		outhProfile.redirect_url = config.redirect_url;
	// 		outhProfile.default_grant_type = "client_credentials";
	// 		outhProfile.refresh_token_lifespan = "8640000";
	// 		outhProfile.type = "oauth_provider";
	// 		var profileSys_id = outhProfile.update();

	// 		var outhProfileEntry = new GlideRecord("oauth_entity_profile");
	// 		if (outhProfileEntry.get("c39d92892fb1f0101767d8ddf699b6f4")) {
	// 			var outhProfile = new GlideRecord("oauth_entity");
	// 			if (outhProfile.get(profileSys_id)) {
	// 				outhProfileEntry.name = "Entity " + config.name;
	// 				outhProfileEntry.sys_scope == "b0793e902fb130101767d8ddf699b6d4"; // property application scope
	// 				outhProfileEntry.oauth_entity = profileSys_id;
	// 				//outhProfileEntry.setValue("default",true);
	// 				outhProfileEntry.grant_type = "client_credentials";
	// 				var oauthProfile = outhProfileEntry.update();
	// 			}

	// 		}*/
	// 		var gr = new GlideRecord("oauth_entity");
	// 		gr.get(config.oauth_provider);
	// 		var oauthName = gr.name;
	// 		var gr = new GlideRecord("oauth_entity_profile");
	// 		gr.get(config.oauth_profile);
	// 		//gr.addQuery("oauth_entity", config.oauth_provider);
	// 		gr.query();
	// 		if (gr.next()) {

	// 			var oAuthClient = new sn_auth.GlideOAuthClient();
	// 			//var requestor_context = 'test';
	// 			//var requestor_id = 'abc@xyz.com';
	// 			var oauth_profile_id = gr.sys_id;//'c39d92892fb1f0101767d8ddf699b6f4'; // profile ID [sys_id of  'OAuth Entity Profiles' (oauth_entity_profile) record in OAUTH registry  record]

	// 			var params = { grant_type: "client_credentials" };//, username: 'admin', password: 'pwd', oauth_requestor_context: requestor_context, oauth_requestor: requestor_id, oauth_provider_profile: oauth_profile_id }; //
	// 			var json = new global.JSON();
	// 			var text = json.encode(params);
	// 			var tokenResponse = oAuthClient.requestToken(oauthName, text); //'oAuth Test' is the name of the OAuth application registry record (oauth_entity)
	// 			//gs.info("tokenresponse" + JSON.stringify(tokenResponse));//"profile " + config.name
	// 			var token = tokenResponse.getToken();
	// 			var access_token = token.getAccessToken();

	// 			gs.info("AccessToken:" + access_token);
	// 			gs.info("AccessTokenExpiresIn:" + token.getExpiresIn());
	// 			gs.info(" RefreshToken:" + token.getRefreshToken());
	// 			restMsg.setRequestHeader("Authorization", "Bearer " + access_token);
	// 			restMsg.setRequestHeader("Accept", "*/*");
	// 		}
	// 		/*var gr = new GlideRecord("oauth_entity_profile");
	// 		gr.addQuery("oauth_entity", config.oauth_provider);
	// 		gr.query();
	// 		if (gr.next()) {
	// 			var oauth_profile_id = gr.sys_id;
	// 			var restMsg1 = new GlideRecord("sys_rest_message");
	// 			if (restMsg1.get("453c09b42f7d70101767d8ddf699b694"))//  REST Message ID
	// 			{
	// 				restMsg1.oauth2_profile = oauth_profile_id;
	// 				//restMsg.rest_endpoint = auth_url;
	// 				restMsg1.update();
	// 			}
	// 			//gs.info("token=" + "Bearer " + access_token);
	// 			//restMsg.setRequestHeader("Authorization", "Bearer " + access_token);

	// 		}*/


	// 	}

	// 	gs.info("URL called" + config.solution_endpoint);
	// 	restMsg.setStringParameter("base_url", config.solution_endpoint);
	// 	return restMsg;
	// },


	type: 'CVRFSolutionIntegration'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-13 05:56:35</sys_created_on>
        <sys_id>662dcb7307713010568cffa08c1ed0be</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>CVRFSolutionIntegration</sys_name>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_include_662dcb7307713010568cffa08c1ed0be</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-18 04:31:48</sys_updated_on>
    </sys_script_include>
</record_update>
