<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_440354_cvrf_inte.CVRFUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CVRFUtil</name>
        <script><![CDATA[var CVRFUtil = Class.create();
CVRFUtil.prototype = {
    initialize: function () {
    },

    _determineWhichToImport: function (apiConfig, domain) {
        //var apiConfig = this._getAPIConfig(domain);
        if (gs.nil(apiConfig)) {
            gs.warn("[CVRF] Can not find API configuration");
            throw new Error("[CVRF] Can not find API configuration");
        }

        // var r = new sn_ws.RESTMessageV2('MSRC Solution Integration', 'GET MSRC Updates');
        // r.setRequestHeader("Accept", "application/json");
        // r.setRequestHeader("api-key", apiConfig.apiKey);
        // r.setStringParameter("apiUrl", apiConfig.apiUrl);
        gs.info("New config=" + JSON.stringify(apiConfig));
        var r = this._buildRESTMessage(apiConfig);
        if (!gs.nil(apiConfig.start_date) && !gs.nil(apiConfig.end_date)) {
            r.setQueryParameter("startDate", apiConfig.start_date);
            r.setQueryParameter("endDate", apiConfig.end_date);
        }
        var response = r.execute();
        var responseBody = response.getBody();
        responseBody = new global.JSON().decode(responseBody);
        var statusCode = response.getStatusCode();

        if (statusCode != 200) {
            // give more human understandable explanation here when throwing error

            if (statusCode == 400) {
                gs.warn("Invalid response code received from MSRC when getting update bullteins: Bad Request " + statusCode + " The URL is incorrect.");
                throw new Error("Invalid response code received from MSRC when getting update bullteins: Bad Request " + statusCode + " The URL is incorrect.");
            }

            if (statusCode == 401) {
                gs.warn("Invalid response code received from MSRC when getting update bullteins: Unauthorized " + statusCode + " The URL is incorrect.");
                throw new Error("Invalid response code received from MSRC when getting update bullteins: Unauthorized " + statusCode + " The URL is incorrect.");
            }

            if (statusCode == 404) {
                gs.warn("Invalid response code received from MSRC when getting update bullteins: Not Found " + statusCode);
                throw new Error("Invalid response code received from MSRC when getting update bullteins: Not Found " + statusCode + " The URL is incorrect.");
            }

            if (statusCode == 500) {
                gs.warn("Invalid response code received from MSRC when getting update bullteins: Internal Server Error " + statusCode);
                throw new Error("Invalid response code received from MSRC when getting update bullteins: Internal Server Error " + statusCode);
            }

            gs.warn("Invalid response code received from MSRC when getting update bullteins: " + statusCode);
            throw new Error("Invalid response code received from MSRC when getting update bullteins: " + statusCode + " The URL is incorrect.");

        } else {
            if (!gs.nil(responseBody)) {
                var updates = responseBody.advisories;
                for (var i = 0; i < updates.length; i++) {
                    var update = updates[i];
                    var id = update.advisoryId;
                    var title = update.advisoryTitle;
                    var initRel = update.firstPublished;
                    var CVRFUrl = update.cvrfUrl;
                    if (CVRFUrl != "" && CVRFUrl != "NA") {
                        initRel = this._convertToSNFriendlyTime(initRel);
                        var currentRel = update.lastUpdated;
                        currentRel = this._convertToSNFriendlyTime(currentRel);

                        var gr = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration_update");
                        if (domain)
                            gr.addQuery("sys_domain", domain);
                        else
                            gr.addQuery("sys_domain", "global");
                        gr.addQuery("id", id);
                        gr.query();
                        if (gr.next()) {
                            var oldCurrentRel = gr.last_modified_date;
                            oldCurrentRel = new GlideDateTime(oldCurrentRel);

                            var needImport = true;
                            // if the new release date is larger than the current release date
                            // import is needed
                            if (currentRel.compareTo(oldCurrentRel) > 0)
                                needImport = true;
                            // if the new release date is the same as the current release date
                            // 1. and the need_import field is true, import is needed
                            // 2. and the need_import field is false, import is not needed
                            if (currentRel.compareTo(oldCurrentRel) === 0)
                                needImport = gr.getValue("need_import");

                            gr.setValue("title", title);
                            gr.setValue("need_import", needImport);
                            gr.setValue("initial_release_date", initRel);
                            gr.setValue("last_modified_date", currentRel);
                            gr.setValue("cvrf_url", CVRFUrl);
                            gr.update();
                        } else {
                            gr = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration_update");
                            gr.initialize();
                            if (domain)
                                gr.setValue("sys_domain", domain);
                            else
                                gr.setValue("sys_domain", "global");
                            gr.setValue("id", id);
                            gr.setValue("title", title);
                            gr.setValue("need_import", true);
                            gr.setValue("initial_release_date", initRel);
                            gr.setValue("last_modified_date", currentRel);
                            gr.setValue("cvrf_url", CVRFUrl);
                            gr.insert();
                        }
                    }
                }
            }
        }
    },

    _buildRESTMessage: function (config) {
        try {
            var restMsg = new sn_ws.RESTMessageV2("CVRF Solutions", "Retrieve Solutions");
            if (config.authenticationType == "BASIC_AUTH") {
                restMsg.setBasicAuth(config.username, config.password);
            } else if (config.authenticationType == "OAUTH_2.0") {

                /*var outhProfile = new GlideRecord("oauth_entity");
                //outhProfile.initialize();
                outhProfile.get("4dc55ecd2f71f0101767d8ddf699b6fe");
                outhProfile.name = "profile " + config.name;
                outhProfile.sys_scope = "b0793e902fb130101767d8ddf699b6d4"; // property application scope
    
                outhProfile.client_id = config.client_id;
                outhProfile.client_secret = config.client_secret;
                outhProfile.active = true;
                outhProfile.auth_url = config.authorization_url;
                outhProfile.token_url = config.token_url;
                outhProfile.redirect_url = config.redirect_url;
                outhProfile.default_grant_type = "client_credentials";
                outhProfile.refresh_token_lifespan = "8640000";
                outhProfile.type = "oauth_provider";
                var profileSys_id = outhProfile.update();
    
                var outhProfileEntry = new GlideRecord("oauth_entity_profile");
                if (outhProfileEntry.get("c39d92892fb1f0101767d8ddf699b6f4")) {
                    var outhProfile = new GlideRecord("oauth_entity");
                    if (outhProfile.get(profileSys_id)) {
                        outhProfileEntry.name = "Entity " + config.name;
                        outhProfileEntry.sys_scope == "b0793e902fb130101767d8ddf699b6d4"; // property application scope
                        outhProfileEntry.oauth_entity = profileSys_id;
                        //outhProfileEntry.setValue("default",true);
                        outhProfileEntry.grant_type = "client_credentials";
                        var oauthProfile = outhProfileEntry.update();
                    }
    
                }*/
                var gr = new GlideRecord("oauth_entity");
                gr.get(config.oauth_provider);
                var oauthName = gr.name;
                var gr = new GlideRecord("oauth_entity_profile");
                gr.get(config.oauth_profile);
                //gr.addQuery("oauth_entity", config.oauth_provider);
                gr.query();
                if (gr.next()) {

                    var oAuthClient = new sn_auth.GlideOAuthClient();
                    //var requestor_context = 'test';
                    //var requestor_id = 'abc@xyz.com';
                    var oauth_profile_id = gr.sys_id;//'c39d92892fb1f0101767d8ddf699b6f4'; // profile ID [sys_id of  'OAuth Entity Profiles' (oauth_entity_profile) record in OAUTH registry  record]

                    var params = { grant_type: "client_credentials" };//, username: 'admin', password: 'pwd', oauth_requestor_context: requestor_context, oauth_requestor: requestor_id, oauth_provider_profile: oauth_profile_id }; //
                    var json = new global.JSON();
                    var text = json.encode(params);
                    var tokenResponse = oAuthClient.requestToken(oauthName, text); //'oAuth Test' is the name of the OAuth application registry record (oauth_entity)
                    //gs.info("tokenresponse" + JSON.stringify(tokenResponse));//"profile " + config.name
                    var token = tokenResponse.getToken();
                    var access_token = token.getAccessToken();

                    gs.info("AccessToken:" + access_token);
                    gs.info("AccessTokenExpiresIn:" + token.getExpiresIn());
                    gs.info(" RefreshToken:" + token.getRefreshToken());
                    restMsg.setRequestHeader("Authorization", "Bearer " + access_token);
                    restMsg.setRequestHeader("Accept", "*/*");
                }
                /*var gr = new GlideRecord("oauth_entity_profile");
                gr.addQuery("oauth_entity", config.oauth_provider);
                gr.query();
                if (gr.next()) {
                    var oauth_profile_id = gr.sys_id;
                    var restMsg1 = new GlideRecord("sys_rest_message");
                    if (restMsg1.get("453c09b42f7d70101767d8ddf699b694"))//  REST Message ID
                    {
                        restMsg1.oauth2_profile = oauth_profile_id;
                        //restMsg.rest_endpoint = auth_url;
                        restMsg1.update();
                    }
                    //gs.info("token=" + "Bearer " + access_token);
                    //restMsg.setRequestHeader("Authorization", "Bearer " + access_token);
                            	
                }*/


            }

            gs.info("URL called" + config.solution_endpoint);
            restMsg.setStringParameter("base_url", config.solution_endpoint);
            return restMsg;
        } catch (e) {
            gs.error("CVRF ERROR in REST: " + e);
        }
    },

    _convertToSNFriendlyTime: function (timeStr) {
        if (gs.nil(timeStr))
            return;

        timeStr = timeStr.replace(/T/g, " ").replace(/Z/g, "");

        return new GlideDateTime(timeStr);
    },

    type: 'CVRFUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-16 07:36:04</sys_created_on>
        <sys_id>dee0073407427010568cffa08c1ed0e4</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>CVRFUtil</sys_name>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_include_dee0073407427010568cffa08c1ed0e4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-18 07:08:46</sys_updated_on>
    </sys_script_include>
</record_update>
