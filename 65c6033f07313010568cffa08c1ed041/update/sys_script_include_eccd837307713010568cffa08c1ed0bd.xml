<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_440354_cvrf_inte.CVRFSolutionProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CVRFSolutionProcessor</name>
        <script><![CDATA[var CVRFSolutionProcessor = Class.create();
CVRFSolutionProcessor.prototype = {
    initialize: function (domain, source, processId) {
        this.processId = processId;
        this.inserted = 0;
        this.updated = 0;
        this.insertedLib = {};
        this.updatedLib = {};
        this.productLib = {};
        this.productCategoryLib = {};
        this.domain = domain;
        this.SOURCE = source;
        this.SOFTWARE_TABLE = "sn_vul_software";
        this.PRODUCT_CATEGORY_TABLE = "sn_vul_product_category";
    },

    process: function (attachmentGr) {
        try {
            gs.info('process function called');
            if (!gs.nil(attachmentGr)) {
                var attachment = new GlideSysAttachment();
                var stream = attachment.getContentStream(attachmentGr.sys_id);
				gs.info("stream "+stream);
                //Construct XMLDocument2 with input stream as argument.
                var xmlDoc = new XMLDocument2(stream);
                var start = new GlideDateTime();
                var version;
                var node = xmlDoc.getFirstNode("/cvrf:cvrfdoc") ? xmlDoc.getFirstNode("/cvrf:cvrfdoc") : xmlDoc.getFirstNode("/cvrfdoc");
                // gs.info("node : " + node.getNodeName());
                var versionData = node.getAttributes() ;
                var attribute = versionData["xmlns:cvrf"];
                gs.info("Versiondata : " + attribute);
                if (attribute.includes("1.1"))
                    version = 1.1;
                else if(attribute.includes("1.2"))
                    version = 1.2;
                gs.info("Version is : " + version);
                if (null != node) this._handleCvrfdoc(node, version);
                this._completeProcess();
                // var gr1 = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration_update");
                // gr1.deleteMultiple();
            } else {
                gs.warn("CVRF transform: found empty attachment gliderecord");
            }
        } catch (e) {
            gs.error("Exception in process: " + e);
        }
    },

    _handleCvrfdoc: function (node, version) {
        var cvrfData = {};
        cvrfData["cves"] = [];
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            var nodeName = cn.getNodeName();
            gs.info("Node name : " + nodeName + " Node value : " + cn.getTextContent());
            var textContent = gs.nil(cn.getTextContent()) ? "" : cn.getTextContent();
            if (nodeName == "DocumentTitle" || nodeName == "cvrf:DocumentTitle") {
                cvrfData["DocumentTitle"] = textContent;
                continue;
            }
            if (nodeName == "DocumentTracking" || nodeName == "cvrf:DocumentTracking") {
                this._handleDocumentTracking(cvrfData, cn);
                continue;
            }
            if (nodeName == "Vulnerability") {
                this._handleVulnerability(cvrfData, cn);
                continue;
            }
            if (nodeName == "DocumentNotes" || nodeName == "cvrf:DocumentNotes") {
                this._handleDocumentNotes(cvrfData, cn);
                continue;
            }
            if (nodeName == "ProductTree") {
                this._handleProductTree(cvrfData, cn, version);
                continue;
            }
            if (nodeName == "DocumentReferences" || nodeName == "cvrf:DocumentReferences") {
                this._handleDocumentReferences(cvrfData, cn);
                continue;
            }

            if (
                (nodeName == "#text" &&
                    textContent.trim().length == 0) ||
                nodeName == "DocumentType" ||
                nodeName == "DocumentPublisher" ||
                nodeName == "DocumentDistribution"
            )
                continue;
            cvrfData[nodeName] = textContent + "";
        }
        gs.info("CVRFdata : " + JSON.stringify(cvrfData));
        this._populateTables(cvrfData);
    },

    _handleDocumentReferences: function (cvrfData, node) {
        try {
            var cni = node.getChildNodeIterator();
            while (cni.hasNext()) {
                var cn = cni.next();
                if ((cn.getNodeName() == "Reference" || cn.getNodeName() == "cvrf:Reference") && !gs.nil(cn.getTextContent())) {
                    var child = cn.getChildNodeIterator();
                    while (child.hasNext()) {
                        var nextNode = child.next();
                        if ((nextNode.getNodeName() == "URL" || nextNode.getNodeName() == "cvrf:URL") && !gs.nil(cn.getTextContent())) {
                            var url = nextNode.getTextContent();
                            if (cvrfData["url"])
                                cvrfData["url"] = this._handleUrls(url, cvrfData["url"]);
                            else
                                cvrfData["url"] = this._handleUrls(url);
                            break;
                        }
                    }
                }
            }
        } catch (e) {
            gs.error("Exception in handledocument references : " + e);
        }
    },

    _handleDocumentNotes: function (cvrfData, node) {
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            if (cn.getNodeName() == "Note" && cn.getAttribute("Type") == "Summary" && !gs.nil(cn.getTextContent())) {
                cvrfData["description"] = "<h4>" + "Topic" + "</h4>" + cn.getTextContent().trim();
            } else if (cn.getNodeName() == "Note" && cn.getAttribute("Type") == "General" && !gs.nil(cn.getTextContent())) {
                if (cvrfData["description"])
                    cvrfData["description"] += "<br/><br/>" + "<h4>" + "Details" + "</h4>" + cn.getTextContent().trim();
                else
                    cvrfData["description"] = "<h4>" + "Details" + "</h4>" + cn.getTextContent().trim();
                break;
            }
        }
    },

    _handleDocumentTracking: function (cvrfData, node) {
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            var nodeName = cn.getNodeName();
            var textContent = gs.nil(cn.getTextContent()) ? "" : cn.getTextContent();
            if (nodeName == "Identification" || nodeName == "cvrf:Identification") {
                this._handleIdentification(cvrfData, cn);
                continue;
            }
            if (nodeName == "InitialReleaseDate" || nodeName == "cvrf:InitialReleaseDate") {
                cvrfData["date_published"] = this._convertToSNFriendlyTime(textContent);
                continue;
            }
            if (nodeName == "CurrentReleaseDate" || nodeName == "cvrf:CurrentReleaseDate") {
                cvrfData["last_modified"] = this._convertToSNFriendlyTime(textContent);
                continue;
            }
        }
    },

    _handleIdentification: function (rhsa, node) {
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            if (cn.getNodeName() == "ID" || cn.getNodeName() == "cvrf:ID") {
                if (!gs.nil(cn.getTextContent())) {
                    rhsa["id"] = cn.getTextContent();
                    break;
                }
            }
        }
    },

    _convertToSNFriendlyTime: function (timeStr) {
        if (gs.nil(timeStr))
            return;
        timeStr = timeStr.replace(/T/g, " ").replace(/Z/g, "");
        return new GlideDateTime(timeStr);
    },

    _handleVulnerability: function (cvrfData, node) {
        gs.info('vulnerability called : ');
        if (gs.nil(node))
            return;

        var cni = node.getChildNodeIterator();
        var cve = "";
        var notes = "";
        while (cni.hasNext()) {
            var cn = cni.next();
            var nodeName = cn.getNodeName();
            var textContent = gs.nil(cn.getTextContent()) ? "" : cn.getTextContent();
            if (nodeName == "Remediations" && !cvrfData["type"]) {
                this._handleRemediation(cvrfData, cn, cve);
                continue;
            }
            if (nodeName == "CVE") {
                cve = textContent;
                cvrfData["cves"].push(cve);
                continue;
            }
            if (nodeName == "Notes") {
                notes = this._getCveNotes(cn);
                continue;
            }
        }
        var additionalData = "<h3>" + cve + "</h3>";
        additionalData += notes;
        additionalData += "<hr>";
        if (cvrfData["vulnerability_notes"])
            cvrfData["vulnerability_notes"] += additionalData;
        else cvrfData["vulnerability_notes"] = additionalData;
    },

    _getCveNotes: function (node) {
        gs.info("Notes : " + JSON.stringify(node));
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            if (cn.getNodeName() == "Note") {
                return cn.getTextContent();
            }
        }
    },

    _handleProductTree: function (cvrfData, node, version) {
        try {
            gs.info("producttree node : " + node.getNodeName());
            gs.info("In product tree with version : " + version);
            gs.info("handle producttree function called");
            var productMap = {};
            var cni = node.getChildNodeIterator();
            if (version == 1.1) {
                while (cni.hasNext()) {// first Branch node typr vendor
                    var cn1 = cni.next();
                    if (cn1.getNodeName() == "Branch" && cn1.getAttribute("Type") == "Vendor") {
                        var child2 = cn1.getChildNodeIterator();
                        while (child2.hasNext()) {//iterate Product Family
                            var cn = child2.next();
                            var familyName = cn.getAttribute("Name");
                            if (cn.getNodeName() == "Branch" && cn.getAttribute("Type") == "Product Family") {
                                var child1 = cn.getChildNodeIterator();
                                while (child1.hasNext()) {// iterate product name
                                    var nextNode = child1.next();
                                    if (nextNode.getNodeName() == "Branch" && nextNode.getAttribute("Type") == "Product Name") {
                                        this._fetchSoftwareInfo(nextNode, productMap, familyName);
                                    }
                                }
                                //break;
                            }
                        }
                    }
                }
            }
            else {
                while (cni.hasNext()) {// first Branch node typr vendor
                    var n1 = cni.next();
                    gs.info("N1 node : " + n1.getNodeName());
                    if (n1.getNodeName() == "Branch" /*&& n1.getAttribute("Type") == "Vendor"*/) {
                        var n2 = n1.getChildNodeIterator();
                        while (n2.hasNext()) {
                            var n3 = n2.next();
                            if (n3.getNodeName() == "Branch" && n3.getAttribute("Type") == "Product Name") {
                                gs.info("N3 node : " + n3.getNodeName());
                                var n4 = n3.getChildNodeIterator();
                                while (n4.hasNext()) {
                                    var n5 = n4.next();
                                    gs.info("N5 node : " + n5);
                                    if (n5.getNodeName() == "FullProductName" && !gs.nil(n5.getTextContent())) {
                                        var pMap = {};
                                        var productName = n5.getTextContent();
                                        pMap["productName"] = productName;
                                        pMap["value"] = n5.getTextContent();
                                        productMap[n5.getAttribute("ProductID")] = pMap;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            gs.info("Productmap : " + JSON.stringify(productMap));
            cvrfData["productMap"] = productMap;

        } catch (e) {
            gs.error("Exception in producttree : " + e);
        }
    },

    _populateTables: function (cvrfData) {
        var solutionSysId;
        var newProductSysIds;
        var newProductCategories;
        var gr = new GlideRecord("sn_vul_solution");
        gr.addQuery("source_id", cvrfData["id"]);
        gr.addQuery("source", this.SOURCE);
        if (this.domain) gr.addQuery("sys_domain", this.domain);
        gr.query();
        if (gr.next())
            this.updated++;
        else {
            gr.initialize();
            this.inserted++;
        }
        if (this.domain) gr.setValue("sys_domain", this.domain);
        gr.setValue("source_id", cvrfData["id"]);
        gr.setValue("source", this.SOURCE);
        gr.setValue("solution_type", this._getSolutionType(cvrfData["type"]));
        if (!gs.nil(cvrfData["DocumentTitle"]))
            gr.setValue("summary", cvrfData["DocumentTitle"]);
        if (!gs.nil(cvrfData["url"]))
            gr.setValue("urls", cvrfData["url"]);
        if (!gs.nil(cvrfData["description"]))
            gr.setValue("description", cvrfData["description"]);
        gr.setValue("bulletin", cvrfData["id"]);
        if (!gs.nil(cvrfData["date_published"]))
            gr.setValue("date_published", cvrfData["date_published"]);
        if (!gs.nil(cvrfData["date_published"]))
            gr.setValue("last_modified", cvrfData["last_modified"]);
        if (!gs.nil(cvrfData["vulnerability_notes"]))
            gr.setValue("vulnerability_notes", cvrfData["vulnerability_notes"]);
        if (!gs.nil(cvrfData["productMap"])) {
            newProductSysIds = this._handleProducts(cvrfData["productMap"]);
            newProductCategories = this._handleProductCategories(cvrfData["productMap"]);
        }
        gr.setValue("affected_products", newProductSysIds);
        gr.setValue("product_category", newProductCategories);
        gr.setValue("metrics_status", 1);
        solutionSysId = gr.update();
        gs.info('Solution SysId is : ' + solutionSysId);
        for (x in cvrfData["cves"]) {
            var cveSysId = this._insertCveRecord(cvrfData["cves"][x]);
            if (!gs.nil(cveSysId)) {
                this._populateCveM2m(cveSysId, solutionSysId);
                this._rollupSolFromNvdToThirdPartyVul(cveSysId, solutionSysId);
            }
        }
    },

    _handleProductCategories: function (productMap) {
        var productSysIds = [];
        var productName;
        var cpe;
        var prodSysId;
        for (var i = 0, keys = Object.keys(productMap), len = keys.length; i < len; i++) {
            //productName = keys[i];
            //cpe = productMap[keys[i]];
            prodSysId = this._handleProductCategory(productMap[keys[i]]);
            
            if (productSysIds.indexOf(prodSysId) == -1 && !gs.nil(prodSysId)) {
                productSysIds.push(prodSysId);
            }
        }
        return productSysIds;
    },

    _handleProductCategory: function (product) {
        var prodSysId;
        var gr;
        var pId = product["familyName"];
        if (!gs.nil(pId)) {
            gr = new GlideRecord(this.PRODUCT_CATEGORY_TABLE);
            gr.addQuery("category", pId);
            gr.query();
            if (gr.next()) {
                gr.setValue("category", pId);
                //gr.setValue("display_name", pId);
                gr.update();
                prodSysId = gr.getUniqueValue();
            } else {
                gr.initialize();
                gr.setValue("category", pId);
                //gr.setValue("display_name", pId);//product["productName"]);
                prodSysId = gr.insert();
            }
            return prodSysId;
        }

        return null;
    },

    _populateCveM2m: function (vulSysId, solSysId) {
        var gr = new GlideRecord("sn_vul_m2m_vulnerability_solution");
        if (gr.isValid()) {
            if (this.domain) gr.addQuery("sys_domain", this.domain);
            gr.addQuery("sn_vul_entry", vulSysId);
            gr.addQuery("sn_vul_solution", solSysId);
            gr.query();
            if (!gr.next()) {
                gr.initialize();
                if (this.domain) gr.setValue("sys_domain", this.domain);
                gr.setValue("sn_vul_entry", vulSysId);
                gr.setValue("sn_vul_solution", solSysId);
                gr.insert();
            }
        }
    },

    _insertCveRecord: function (cve) {
        if (gs.nil(cve) || !cve.startsWith("CVE")) return;
        var gr = new GlideRecord("sn_vul_nvd_entry");
        gr.addQuery("id", cve);
        gr.query();
        if (gr.next())
            return gr.getUniqueValue();
        else {
            gr.initialize();
            gr.setValue("id", cve);
            return gr.insert();
        }
    },

    _rollupSolFromNvdToThirdPartyVul: function (cveSysId, solSysId) {
        var m2m = new GlideRecord("sn_vul_m2m_entry_cve");
        if (this.domain)
            m2m.addQuery("sys_domain", this.domain);
        m2m.addQuery("sn_vul_nvd_entry", cveSysId);
        m2m.query();

        var superSedence = new sn_vul.SolutionSupersedenceUtil();
        while (m2m.next()) {
            var vulSysId = m2m.getValue("sn_vul_entry");
            var isExcluded = superSedence.isEligibleForExclusion(vulSysId, "Red Hat");
            var vulSol = new GlideRecord("sn_vul_m2m_vulnerability_solution");
            if (this.domain)
                vulSol.addQuery("sys_domain", this.domain);
            vulSol.addQuery("sn_vul_entry", vulSysId);
            vulSol.addQuery("sn_vul_solution", solSysId);
            vulSol.query();
            if (vulSol.next()) {
                var inherited = vulSol.getValue('is_inherited');
                if (inherited == 'true' || inherited == '1')
                    vulSol.setValue('is_inherited', false);
                if (vulSol.getValue('exclusion_type') != this.MANUAL) {
                    vulSol.setValue('is_excluded', isExcluded);
                    vulSol.setValue('exclusion_type', this.RULE_BASED);
                }
                vulSol.update();
                this._setSolutionUpdated(solSysId);
            } else {
                vulSol.initialize();
                if (this.domain)
                    vulSol.setValue("sys_domain", this.domain);
                vulSol.setValue("sn_vul_entry", vulSysId);
                vulSol.setValue("sn_vul_solution", solSysId);
                vulSol.setValue('is_inherited', false);
                vulSol.setValue('is_excluded', isExcluded);
                vulSol.setValue('exclusion_type', this.RULE_BASED);
                vulSol.insert();
                this._setSolutionUpdated(solSysId);
            }
        }
    },

    _setSolutionUpdated: function (solutionId) {
        var sol = new GlideRecord('sn_vul_solution');
        sol.get(solutionId);
        sol.autoSysFields(false);
        sol.setValue('sys_updated_on', new GlideDateTime().toString());
        sol.update();
    },


    _getSolutionType: function (solTypeString) {
        var solType = this._typeLib[solTypeString] || 'NONE_AVAILABLE';
        return solType;
    },

    // Following are the possible values for solution_type
    // Workaround, Mitigation, Vendor Fix, None Available, Will Not Fix
    _typeLib: {
        "Workaround": "WORKAROUND",
        "Mitigation": "MITIGATION",
        "Vendor Fix": "VENDOR_FIX",
        "None Available": "NONE_AVAILABLE",
        "Will Not Fix": "WILL_NOT_FIX",
    },

    /**
     * This method creates/updates the products
     * and return the sysIds
     * @param: productMap - map containing the 
     * productName as the key and the cpe as the value.
     */
    _handleProducts: function (productMap) {
        var productSysIds = [];
        var productName;
        var cpe;
        var prodSysId;
        for (var i = 0, keys = Object.keys(productMap), len = keys.length; i < len; i++) {
            //productName = keys[i];
            //cpe = productMap[keys[i]];
            prodSysId = this._handleProduct(productMap[keys[i]], keys[i]);
            if (productSysIds.indexOf(prodSysId) == -1) {
                productSysIds.push(prodSysId);
            }
        }
        return productSysIds;
    },

    _handleProduct: function (product, pId) {
        var prodSysId;
        var gr;

        gr = new GlideRecord(this.SOFTWARE_TABLE);
        gr.addQuery("raw_product", pId);
        gr.query();
        if (gr.next()) {
            gr.setValue("raw_product", pId);
            gr.setValue("display_name", pId);
            gr.setValue("version", product["version"])
            gr.update();
            prodSysId = gr.getUniqueValue();
        } else {
            gr.initialize();
            gr.setValue("raw_product", pId);
            gr.setValue("display_name", pId);//product["productName"]);
            gr.setValue("version", product["version"])
            prodSysId = gr.insert();
        }

        return prodSysId;
    },

    _fetchSoftwareInfo: function (node, productMap, familyName) {
        try {
            gs.info("fetch software function called : " + familyName);
            var productName = node.getAttribute("Name");
            var cni = node.getChildNodeIterator();

            while (cni.hasNext()) {//
                var cn = cni.next();
                if (cn.getNodeName() == "Branch" && cn.getAttribute("Type") == "Product Version") {
                    var version = cn.getAttribute("Name");
                    var child1 = cn.getChildNodeIterator();
                    while (child1.hasNext()) {
                        var nextNode = child1.next();
                        if (nextNode.getNodeName() == "FullProductName" && !gs.nil(nextNode.getTextContent())) {
                            var pMap = {};
                            pMap["familyName"] = familyName;
                            pMap["productName"] = productName;
                            pMap["version"] = version;
                            pMap["value"] = nextNode.getTextContent();
                            // pMap["product_id"] = nextNode.getAttribute("ProductID");
                            //productMap[cn.getTextContent()] = gs.nil(cn.getAttribute("CPE")) ? "" : cn.getAttribute("CPE");
                            // productMap.append(pMap);
                            productMap[nextNode.getAttribute("ProductID")] = pMap;
                        }
                    }
                }
            }
        } catch (e) {
            gs.error("Exception in fetch software info : " + e);
        }
    },
    _handleRemediation: function (cvrfData, node, cve) {
        gs.info('handle remadiation called : ' + cve);
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            if (cn.getNodeName() == "Remediation") {
                cvrfData["type"] = cn.getAttribute("Type");
                this._fetchInternalData(cvrfData, cn, cve);
            }
        }
    },

    _fetchInternalData: function (cvrfData, node, cve) {
        var cni = node.getChildNodeIterator();
        while (cni.hasNext()) {
            var cn = cni.next();
            if (cn.getNodeName() == "Description") {
                if (cvrfData["description"])
                    cvrfData["description"] += "<br/><br/>" + "<h4>" + "Solution" + "</h4>" + cn.getTextContent();
                else
                    cvrfData["description"] = "<h4>" + "Solution" + "</h4>" + cn.getTextContent();
                continue;
            }
            if (cn.getNodeName() == "URL") {
                var url = cn.getTextContent();
                if (cvrfData["url"]) cvrfData["url"] = this._handleUrls(url, cvrfData["url"]);
                else cvrfData["url"] = this._handleUrls(url);
                continue;
            }
            //need to add code for productID
        }
    },

    _handleUrls: function (newUrl, oldUrls) {
        if (gs.nil(newUrl)) return oldUrls;
        newUrl = newUrl.replace(/=/g, "&#61;");
        var newUrlHtml =
            '<a href="' +
            newUrl +
            '" rel="nofollow" target="_blank">' +
            newUrl +
            "</a>";
        if (gs.nil(oldUrls))
            return newUrlHtml;
        if (oldUrls.indexOf(">" + newUrl + "</a>") == -1)
            return oldUrls + "<br />" + newUrlHtml;
        else return oldUrls;
    },

    _completeProcess: function () {
        var integrationProcess = new GlideRecord("sn_vul_integration_process");
        if (integrationProcess.get(this.processId) && !gs.nil(integrationProcess.getValue('integration_run'))) {
            integrationProcess.setValue("vi_created", this.inserted);
            integrationProcess.setValue("vi_updated", this.updated);
            integrationProcess.setValue("import_vi", this.inserted + this.updated);
            integrationProcess.update();
        } else
            gs.warn("CVRF transform: can not find the integration process when completing the process: " + this.processId);
    },

    type: 'CVRFSolutionProcessor'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-13 05:58:39</sys_created_on>
        <sys_id>eccd837307713010568cffa08c1ed0bd</sys_id>
        <sys_mod_count>48</sys_mod_count>
        <sys_name>CVRFSolutionProcessor</sys_name>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_include_eccd837307713010568cffa08c1ed0bd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-21 13:05:51</sys_updated_on>
    </sys_script_include>
</record_update>
