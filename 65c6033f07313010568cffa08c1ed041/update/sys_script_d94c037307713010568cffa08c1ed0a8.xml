<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_440354_cvrf_inte_cvrf_configuration</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ValidateConfiguration</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    try {

        if (current.type == "API_BASED") {
            var auth_type, user_name, password, sol_url;
            auth_type = current.authentication_type.trim();
            //auth_url = current.authentication_endpoint;
            sol_url = current.solution_endpoint;

            if (auth_type == "BASIC_AUTH") {
                //credential = current.basic_auth_credential_name;
                user_name = current.user_name;
                password = current.password.getDecryptedValue();

                var authentication = new CVRFLogin();
                var response = authentication.login(sol_url, user_name, password, auth_type);
                if (response.authenticated == false) {
                    gs.addErrorMessage(response.message);

                    current.setValue("user_name", previous.basic_auth_credential_name.user_name);
                    current.setValue("password", "");

                    current.setValue("solution_endpoint", previous.solution_endpoint);
                    current.setValue("authentication_type", previous.authentication_type);
                    current.setValue("name", previous.name);
                    current.setAbortAction(true);
                } else {
                    gs.addInfoMessage("SUCCESS");
                }
            } else if (auth_type == "OAUTH_2.0") {

                /*var outhProfile = new GlideRecord("oauth_entity");
                //outhProfile.initialize();
                outhProfile.get("4dc55ecd2f71f0101767d8ddf699b6fe");
                outhProfile.name = "profile " + current.name.getDisplayValue();
                outhProfile.sys_scope = "b0793e902fb130101767d8ddf699b6d4"; // property application scope

                outhProfile.client_id = current.client_id.getDisplayValue();
                outhProfile.client_secret = current.client_secret_key.getDecryptedValue();
                outhProfile.active = true;
                outhProfile.auth_url = current.authorization_url.getDisplayValue();
                outhProfile.token_url = current.token_url.getDisplayValue();
                outhProfile.redirect_url = current.redirect_url.getDisplayValue();
                outhProfile.default_grant_type = "client_credentials";
                outhProfile.refresh_token_lifespan = "8640000";
                outhProfile.type = "oauth_provider";
                var profileSys_id = outhProfile.update();*/

                /*var outhProfileEntry = new GlideRecord("oauth_entity_profile");//c39d92892fb1f0101767d8ddf699b6f4
                outhProfileEntry.initialize();
                outhProfileEntry.name = "Entity " + current.name.getDisplayValue();
                outhProfileEntry.sys_scope == "b0793e902fb130101767d8ddf699b6d4"; // property application scope
                outhProfileEntry.oauth_entity = profileSys_id;
                //outhProfileEntry.setValue("default",true);
                outhProfileEntry.grant_type = "client_credentials";
                var entirySysID = outhProfileEntry.insert();
                var oauthProfile = entirySysID;*/

                /*var outhProfileEntry = new GlideRecord("oauth_entity_profile");
                if (outhProfileEntry.get("c39d92892fb1f0101767d8ddf699b6f4")) {
                	var outhProfile = new GlideRecord("oauth_entity");
                	if (outhProfile.get(profileSys_id)) {
                		outhProfileEntry.name = "Entity " + current.name.getDisplayValue();
                		outhProfileEntry.sys_scope == "b0793e902fb130101767d8ddf699b6d4"; // property application scope
                		outhProfileEntry.oauth_entity = profileSys_id;
                		//outhProfileEntry.setValue("default",true);
                		outhProfileEntry.grant_type = "client_credentials";
                		var oauthProfile = outhProfileEntry.update();
                	}

                }*/

                /*var restMsg = new GlideRecord("sys_rest_message");
                if (restMsg.get("453c09b42f7d70101767d8ddf699b694"))//  REST Message ID
                {
                	restMsg.oauth2_profile = oauthProfile;
                	//restMsg.rest_endpoint = auth_url;
                	restMsg.update();
                }*/

                /*var restMethod = new GlideRecord("sys_rest_message_fn");
                var defaultGet = "264dcd742f7d70101767d8ddf699b67c";
                if (restMethod.get(defaultGet))//  REST Message ID
                {
                	restMethod.rest_endpoint = auth_url;
                	restMethod.update();
                }

                var restMethod = new GlideRecord("sys_rest_message_fn");
                var retrieve_Solutions = "3d0b6e0d2ff1f0101767d8ddf699b642";
                if (restMethod.get(retrieve_Solutions))//  REST Message ID
                {
                	restMethod.rest_endpoint = sol_url;
                	restMethod.update();
                }*/


            }
            if (current.instance != "") {
                var instance = new GlideRecord("sn_sec_int_impl");
                instance.get(current.instance);
                instance.name = current.name;
                instance.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration"); //"0a82e7212f3570101767d8ddf699b6f2";
                var instanceID = instance.update();

                /*var schedular = new GlideRecord("x_445396_cvrf_inte_cvrf_solution_integration");
                schedular.initialize();
                schedular.name = current.name;
                schedular.integration = "0a82e7212f3570101767d8ddf699b6f2";
                schedular.instance = instanceID;
                //schedular.integration_script = "cd016f512ff530101767d8ddf699b6d7";
                schedular.insert();*/


            } else {
                var instance = new GlideRecord("sn_sec_int_impl");
                instance.initialize();
                instance.name = current.name;
                instance.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration");
                var instanceID = instance.insert();

                var schedular = new GlideRecord("x_440354_cvrf_inte_cvrf_solution_integration");
                schedular.initialize();
                schedular.name = current.name;
                schedular.integration = gs.getProperty("x_440354_cvrf_inte.third_party_integration");
                schedular.instance = instanceID;
                schedular.integration_script = gs.getProperty("x_440354_cvrf_inte.solution_integration_script");
                schedular.integration_factory_script = "(function (integrationProcessGr) {return new x_440354_cvrf_inte.CVRFSolutionIntegration();})(integrationProcessGr);";
                var schedular_id = schedular.insert();

                var dataSources = ["3a4a973f07713010568cffa08c1ed0e6", "dcd17cdd07c2b010568cffa08c1ed026", "a1f13cdd07c2b010568cffa08c1ed0eb", "291234110706b010568cffa08c1ed093"]

                for (var x in dataSources) {
                    var m2m = new GlideRecord("sn_vul_int_data_src");
                    m2m.initialize();
                    m2m.sys_data_source = dataSources[x];
                    m2m.sn_vul_integration = schedular_id;
                    m2m.insert();
                }


                /*var instanceParameters = new GlideRecord("sn_sec_int_impl_config");
                instanceParameters.addQuery("implementation", instanceID);
                instanceParameters.addQuery("configuration", "a663e3612f3570101767d8ddf699b656");

                instanceParameters.query()
                if (instanceParameters.next()) {
                	instanceParameters.value = sol_url;
                	instanceParameters.update();
                }*/
                current.instance = instanceID;
            }

            var d = {
                "11bc5bbf07713010568cffa08c1ed081": sol_url, // id of integration parameter: value from the form
                "6ddbdf7f07713010568cffa08c1ed03d": auth_type,
                //"8fdcb2a62f3530101767d8ddf699b619": auth_url,
                "100c1f7f07713010568cffa08c1ed07c": user_name,
                "cf1cd3bf07713010568cffa08c1ed082": password,
                //"a5df199f2fb130101767d8ddf699b600": current.client_id,
                "c5ac1bbf07713010568cffa08c1ed03d": current.name,
                //"ddff199f2fb130101767d8ddf699b6b5": current.client_secret_key.getDecryptedValue(),
                //"ca5021df2fb130101767d8ddf699b62d": current.redirect_url,
                //"bc702d9f2fb130101767d8ddf699b6d0": current.token_url,
                //"9440ad9f2fb130101767d8ddf699b6de": current.authorization_url,
                "6b4c1b7f07713010568cffa08c1ed05d": current.oauth_provider,
                "616c53bf07713010568cffa08c1ed0ad": current.oauth_profile,
                "8d93ff090702b010568cffa08c1ed0e4": current.start_date,
                "eea373490702b010568cffa08c1ed0eb": current.end_date
            }
            var instanceParameters;
            for (var x in d) {
                instanceParameters = new GlideRecord("sn_sec_int_impl_config");
                instanceParameters.addQuery("implementation", instanceID);
                instanceParameters.addQuery("configuration", x);

                instanceParameters.query()
                if (instanceParameters.next()) {
                    instanceParameters.value = d[x];
                    instanceParameters.update();
                }
            }
        } else {
            gs.info('add data in the import queue entry');

                    gs.info('inside else part of BR');
                    var ds = new GlideRecord("sys_data_source");
                    
                    


                    // 				var attachmentGr = new GlideRecord('sys_attachment');
                   
                    var gr1 = new GlideRecord('sn_vul_ds_import_q_entry');
                    gr1.initialize();
                    gr1.data_source = '3a4a973f07713010568cffa08c1ed0e6';
                    gr1.status = 'QUEUED';
                    


                    /*var gr = new GlideRecord("sys_attachment");
					gr.get(current.sys_id);
					gs.info("File name:" + current.sys_id);
					if (gr.file_name.indexOf(".zip") > -1){*/
						gr1.data_source = "e26a95a4db7af850612ad6aa48961932";
						//}
				var sysId = gr1.insert();
                    gs.info('sys id of import queue entry : ' + sysId);
			var attachment = new GlideSysAttachment();
                    var copiedAttachments2 = attachment.copy('x_440354_cvrf_inte_cvrf_configuration', current.sys_id, 'sn_vul_ds_import_q_entry', sysId);
                    gs.info('file attached to import queue record :' + copiedAttachments2);
                   
                
            
            //         var gr = new GlideRecord('sn_vul_ds_import_q_entry');
            //         gr.initialize();
            //         gr.data_source = 'eae9dcad07753010568cffa08c1ed050';
            //         gr.status = 'QUEUED';
            //         var sysId = gr.insert();
            //         gs.info('sys id of import queue entry : ' + sysId);


            //         var attachment = new GlideSysAttachment();
            //         var copiedAttachments2 = attachment.copy('x_445396_cvrf_inte_cvrf_xml_configuration', current.sys_id, 'sn_vul_ds_import_q_entry', sysId);
            //         gs.info('file attached to import queue record :' + copiedAttachments2);


            //         gs.info('file attached to sys_data_source record :' + copiedAttachments);

            // 		var mgr = new sn_vul.VulnerabilityDSAttachmentManager();
            // 		mgr.processQueue();
            gs.info('Queue processed');
        }
    } catch (e) {
        gs.info("Exception in BR : " + e);
    }


})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-13 05:53:18</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d94c037307713010568cffa08c1ed0a8</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>ValidateConfiguration</sys_name>
        <sys_overrides/>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy/>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_d94c037307713010568cffa08c1ed0a8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-21 12:46:59</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d94c037307713010568cffa08c1ed0a8"/>
</record_update>
