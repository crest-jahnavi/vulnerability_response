<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_440354_cvrf_inte.CVRFCiscoJSONSolutionProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CVRFCiscoJSONSolutionProcessor</name>
        <script><![CDATA[var CVRFCiscoJSONSolutionProcessor = Class.create();
CVRFCiscoJSONSolutionProcessor.prototype = {

    initialize: function (domain, source, processId) {
        this.processId = processId;
        this.inserted = 0;
        this.updated = 0;
        this.insertedLib = {};
        this.updatedLib = {};
        this.productLib = {};
        this.productCategoryLib = {};
        this.domain = domain;
        this.SOURCE = source;
    },

    process: function (attachmentGr) {
        try {
            gs.info('process function called');
            if (!gs.nil(attachmentGr)) {

                var attachment = new GlideSysAttachment();
                var payload = attachment.getContent(attachmentGr);
                var json = new global.JSON();
                payload = json.decode(payload);

                var node = payload.cvrfdoc;
                if (null != node) this._handleCvrfdoc(node);
                this._completeProcess();
            } else {
                gs.warn("CVRF transform: found empty attachment gliderecord");
            }
        } catch (e) {
            gs.error("Exception in process: " + e);
        }
    },

    _handleCvrfdoc: function (nodes) {
        var cvrfData = {};
        cvrfData["cves"] = [];
        for (var node in nodes) {
            var textContent = nodes[node];
            if (node == "DocumentTitle") {
                cvrfData["DocumentTitle"] = textContent;
                continue;
            }
            if (node == "DocumentTracking") {

                this._handleDocumentTracking(cvrfData, nodes[node]);
                continue;
            }
            if (node == "Vulnerability") {
                this._handleVulnerability(cvrfData, node);
                gs.info("Node After " + JSON.stringify(cvrfData));
                continue;
            }
            if (node == "DocumentNotes") {
                this._handleDocumentNotes(cvrfData, node);
                continue;
            }
            if (node == "ProductTree") {
                // this._handleProductTree(cvrfData, node);
                continue;
            }
            if (node == "DocumentReferences") {
                this._handleDocumentReferences(cvrfData, node);
                continue;
            }

            if (
                (node == "#text" &&
                    textContent.trim().length == 0) ||
                node == "DocumentType" ||
                node == "DocumentPublisher" ||
                node == "DocumentDistribution"
            )
                continue;
            cvrfData[node] = textContent + "";
        }
        gs.info("CVRFdata : " + JSON.stringify(cvrfData));
        // this._populateTables(cvrfData);
    },

    _populateTables: function (cvrfData) {
        try{
        var solutionSysId;
        var newProductSysIds;
        var gr = new GlideRecord("sn_vul_solution");
        gr.addQuery("source_id", cvrfData["id"]);
        gr.addQuery("source", this.SOURCE);
        if (this.domain) gr.addQuery("sys_domain", this.domain);
        gr.query();
        if (gr.next())
            this.updated++;
        else {
            gr.initialize();
            this.inserted++;
        }
        if (this.domain) gr.setValue("sys_domain", this.domain);
        gr.setValue("source_id", cvrfData["id"]);
        gr.setValue("source", this.SOURCE);
        gr.setValue("solution_type", this._getSolutionType(cvrfData["type"]));
        if (!gs.nil(cvrfData["DocumentTitle"]))
            gr.setValue("summary", cvrfData["DocumentTitle"]);
        if (!gs.nil(cvrfData["url"]))
            gr.setValue("urls", cvrfData["url"]);
        if (!gs.nil(cvrfData["description"]))
            gr.setValue("description", cvrfData["description"]);
        gr.setValue("bulletin", cvrfData["id"]);
        if (!gs.nil(cvrfData["date_published"]))
            gr.setValue("date_published", cvrfData["date_published"]);
        if (!gs.nil(cvrfData["date_published"]))
            gr.setValue("last_modified", cvrfData["last_modified"]);
        if (!gs.nil(cvrfData["vulnerability_notes"]))
            gr.setValue("vulnerability_notes", cvrfData["vulnerability_notes"]);
        // if (!gs.nil(cvrfData["productMap"]))
        //     newProductSysIds = this._handleProducts(cvrfData["productMap"]);
        gr.setValue("affected_products", newProductSysIds);
        gr.setValue("metrics_status", 1);
        solutionSysId = gr.update();
        gs.info('Solution SysId is : ' + solutionSysId);
        // for (x in cvrfData["cves"]) {
        //     var cveSysId = this._insertCveRecord(cvrfData["cves"][x]);
        //     if (!gs.nil(cveSysId)) {
        //         this._populateCveM2m(cveSysId, solutionSysId);
        //         this._rollupSolFromNvdToThirdPartyVul(cveSysId, solutionSysId);
        //     }
        // }
        }catch(e){
            gs.error("Exception in populate tables: " + e);
        }
    },

    _getSolutionType: function (solTypeString) {
        var solType = this._typeLib[solTypeString] || 'NONE_AVAILABLE';
        return solType;
    },

    _typeLib: {
        0: "WORKAROUND",
        1: "MITIGATION",
        2: "VENDOR_FIX",
        3: "NONE_AVAILABLE",
        4: "WILL_NOT_FIX",
        5: "ENTITLEMENT",
    },

    _handleDocumentReferences: function (cvrfData, nodes) {
        try{
        //var cni = node.getChildNodeIterator();
        for (var node in nodes) {
            if (node == "Reference") {
                for (var subNode in node) {
                    if (subNode == "URL") {
                        cvrfData["url"] = this._handleUrls(subNode["URL"], cvrfData["url"]);
                    }
                }
            }
        }
        }catch(e){
            gs.error("Exception in handle document references : " + e);
        }

    },
    _handleProductTree: function (cvrfData, nodes) {
        try {
            var productMap = {};

            for (var node in nodes) {
                var textContent = nodes[node];
                if (node == "Branch"  /*&& cn1.getAttribute("Type") == "Vendor"*/) {
                    var child2 = cn1.getChildNodeIterator();
                    gs.info("checkpoint 2");
                    for (var cnode in node) {
                        var cn = child2.next();
                        var familyName = cn.getAttribute("Name");
                        gs.info("checkpoint3");
                        if (cn.getNodeName() == "Branch" /*&& cn.getAttribute("Type") == "Product Family"*/) {
                            var child1 = cn.getChildNodeIterator();
                            while (child1.hasNext()) {// iterate product name
                                var nextNode = child1.next();
                                if (nextNode.getNodeName() == "Branch" && nextNode.getAttribute("Type") == "Product Name") {
                                    this._fetchSoftwareInfo(nextNode, productMap, familyName);
                                }
                            }
                            //break;
                        }
                    }
                }

            }
            
            cvrfData["productMap"] = productMap;
        } catch (e) {
            gs.error("Exception in producttree : " + e);
        }
    },


    _handleDocumentNotes: function (cvrfData, node) {

        //not aware about attibutes in json
        // for(var node  in nodes){
        //     if (node == "Note" && cn.getAttribute("Type") == "Summary" && !gs.nil(cn.getTextContent())) {
        //         cvrfData["description"] = "<h4>" + "Topic" + "</h4>" + cn.getTextContent().trim();
        //     } else if (cn.getNodeName() == "Note" && cn.getAttribute("Type") == "General" && !gs.nil(cn.getTextContent())) {
        //         if (cvrfData["description"])
        //             cvrfData["description"] += "<br/><br/>" + "<h4>" + "Details" + "</h4>" + cn.getTextContent().trim();
        //         else
        //             cvrfData["description"] = "<h4>" + "Details" + "</h4>" + cn.getTextContent().trim();
        //         break;
        //     }
        // }
    },


    _handleVulnerability: function (cvrfData, nodes) {
        try{
        if (gs.nil(nodes))
            return;

        var cve = "";
        var notes = "";
        for (var node in nodes) {
            gs.info("Vulnerability : " + JSON.stringify(node));
        
            var textContent = nodes[node];
            if (node == "Remediations" && !cvrfData["type"]) {
                this._handleRemediation(cvrfData, nodes[node], cve);
                continue;
            }
            if (node == "CVE") {
                cve = textContent;
                cvrfData["cves"].push(cve);
                continue;
            }
            if (node == "Notes") {
                notes = this._getCveNotes(nodes[node]);
                continue;
            }
        }
        var additionalData = "<h3>" + cve + "</h3>";
        additionalData += notes;
        additionalData += "<hr>";
        if (cvrfData["vulnerability_notes"])
            cvrfData["vulnerability_notes"] += additionalData;
        else cvrfData["vulnerability_notes"] = additionalData;
        }catch(e){
            gs.error("Exception in handlevulnerability : " + e);
        }
    },

    _getCveNotes: function (nodes) {
        for (var node in nodes) {
            if (node == "Note") {
                return nodes[node];
            }
        }
    },

    _handleRemediation: function (cvrfData, nodes, cve) {
        gs.info('handle remadiation called : ' + cve);
        for (var node in nodes) {
            if (node == "Remediation") {
                //cvrfData["type"] = node["Type"];//cn.getAttribute("Type");
                this._fetchInternalData(cvrfData, node, cve);
            }
        }
    },

    _fetchInternalData: function (cvrfData, nodes, cve) {
        try{
        for (var node in nodes) {
            var textContent = nodes[node];
            if (node == "Description") {
                if (cvrfData["description"])
                    cvrfData["description"] += "<br/><br/>" + "<h4>" + "Solution" + "</h4>" + textContent;
                else
                    cvrfData["description"] = "<h4>" + "Solution" + "</h4>" + textContent;
                continue;
            }
            if (node == "URL") {
                var url = textContent;
                if (cvrfData["url"]) cvrfData["url"] = this._handleUrls(url, cvrfData["url"]);
                else cvrfData["url"] = this._handleUrls(url);
                continue;
            }
            //need to add code for productID
        }
        }catch(e){
            gs.error("Exception in fetchInternaldata : " + e);
        }
    },

    _handleUrls: function (newUrl, oldUrls) {
        if (gs.nil(newUrl)) return oldUrls;
        newUrl = newUrl.replace(/=/g, "&#61;");
        var newUrlHtml =
            '<a href="' +
            newUrl +
            '" rel="nofollow" target="_blank">' +
            newUrl +
            "</a>";
        if (gs.nil(oldUrls))
            return newUrlHtml;
        if (oldUrls.indexOf(">" + newUrl + "</a>") == -1)
            return oldUrls + "<br />" + newUrlHtml;
        else return oldUrls;
    },

    _handleDocumentTracking: function (cvrfData, nodes) {
        try{

        for (var node in nodes) {

            var textContent = nodes[node];
            if (node == "Identification") {
                this._handleIdentification(cvrfData, nodes[node]);
                continue;
            }
            if (node == "InitialReleaseDate") {
                cvrfData["date_published"] = this._convertToSNFriendlyTime(textContent);
                continue;
            }
            if (node == "CurrentReleaseDate") {
                cvrfData["last_modified"] = this._convertToSNFriendlyTime(textContent);
                continue;
            }
        }
        gs.info("Node Last " + JSON.stringify(cvrfData));
        }catch(e){
            gs.info("Exception in handle document trecking : " + e);
        }
    },

    _convertToSNFriendlyTime: function (timeStr) {
        if (gs.nil(timeStr))
            return;
        timeStr = timeStr.replace(/T/g, " ").replace(/Z/g, "");
        return new GlideDateTime(timeStr);
    },

    _handleIdentification: function (cvrfData, nodes) {

        try{
        for (var node in nodes) {
            var textContent = nodes[node];
            if (node == "ID") {
                if (!gs.nil(textContent)) {
                    cvrfData["id"] = textContent;
                    break;
                }
            }
        }
        }catch(e){
            gs.info("Exception in handleIdentication : " + e);
        }
    },

    _completeProcess: function () {
        try{
        var integrationProcess = new GlideRecord("sn_vul_integration_process");
        if (integrationProcess.get(this.processId) && !gs.nil(integrationProcess.getValue('integration_run'))) {
            integrationProcess.setValue("vi_created", this.inserted);
            integrationProcess.setValue("vi_updated", this.updated);
            integrationProcess.setValue("import_vi", this.inserted + this.updated);
            integrationProcess.update();
        } else
            gs.warn("CVRF transform: can not find the integration process when completing the process: " + this.processId);
        }catch(e){
            gs.info("Exception in complete process : " + e);
        }
    },

    type: 'CVRFCiscoJSONSolutionProcessor'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-13 05:57:11</sys_created_on>
        <sys_id>3b7dc37307713010568cffa08c1ed01b</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>CVRFCiscoJSONSolutionProcessor</sys_name>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_include_3b7dc37307713010568cffa08c1ed01b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-13 10:47:13</sys_updated_on>
    </sys_script_include>
</record_update>
