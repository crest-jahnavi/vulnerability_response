<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>false</active>
        <api_name>x_440354_cvrf_inte.CVRFJSONSolutionProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CVRFJSONSolutionProcessor</name>
        <script><![CDATA[var CVRFJSONSolutionProcessor = Class.create();
CVRFJSONSolutionProcessor.prototype = {
    initialize: function(domain, source, processId) {
        this.processId = processId;
        this.inserted = 0;
        this.updated = 0;
        this.insertedLib = {};
        this.updatedLib = {};
        this.productLib = {};
        this.productCategoryLib = {};
        this.domain = domain;
        this.SOURCE = source;
        // this.MICROSOFT_SUPPORT_URL = gs.getProperty('sn_vul.microsoft_support_url');
        // this.KB_API_URL = gs.getProperty('sn_vul.microsoft_kb_api_url');
    },
    
    SUMMARY_PLACEHOLDER_MSG: gs.getMessage("Solution for "),
    SUMMARY_PLACEHOLDER_TRAILING_MSG: gs.getMessage(" and others displayed in the CVE related list"),
    SUMMARY_PLACEHOLDER_TRAILING_ADV_MSG: gs.getMessage(" and others displayed in the Vulnerability Details section"),
    PRECEDING_SUMMARY_MSG: gs.getMessage("Preceding solution for "),
    
    DESC_VALID_LINKS_MSG: gs.getMessage("See Links for additional information."),
    DESC_NO_VALID_LINKS_MSG: gs.getMessage("No descriptive content is available from the Microsoft Security Response Center for this solution."),
    NO_LINKS_AVAILABLE: gs.getMessage("No links available"),

    process: function(attachmentGr) {
        gs.info("process function called");
        try{
        if (!gs.nil(attachmentGr)) {
            var attachment = new GlideSysAttachment();
            var payload = attachment.getContent(attachmentGr);
            var json = new global.JSON();
            payload = json.decode(payload);
            gs.info("payload : " + JSON.stringify(payload));
            var bulletin = payload.DocumentTitle ? payload.DocumentTitle.Value : "";
            // handle software models
            var products = payload.ProductTree ? payload.ProductTree.FullProductName : [];
            this._buildProductLib(products);
            var productCategories = payload.ProductTree ? payload.ProductTree.Branch : [];
            this._buildProductCategoryLib(productCategories);

            // release date and update date
            var initRel, updateRel;
            if (payload.DocumentTracking && payload.DocumentTracking.InitialReleaseDate && payload.DocumentTracking.CurrentReleaseDate) {
                var util = new sn_vul.MSRCUtil();
                initRel = util._convertToSNFriendlyTime(payload.DocumentTracking.InitialReleaseDate);
                updateRel = util._convertToSNFriendlyTime(payload.DocumentTracking.CurrentReleaseDate);
            }

            // handle vuls and solutions
            var vulnerabilities = payload.Vulnerability ? payload.Vulnerability : [];
            this._handleVulnerabilities(vulnerabilities, initRel, updateRel, bulletin);

            // complete
            this._completeProcess();
        } else {
            gs.warn("CVRF transform: found empty attachment gliderecord");
        }
        }catch(e){
            gs.error("Exception in process function : " + e);
        }
    },

    _completeProcess: function() {
        gs.info("Conpleteprocess function called");
        var integrationProcess = new GlideRecord("sn_vul_integration_process");
        if (integrationProcess.get(this.processId) && !gs.nil(integrationProcess.getValue('integration_run'))) {
            integrationProcess.setValue("vi_created", this.inserted);
            integrationProcess.setValue("vi_updated", this.updated);
            integrationProcess.setValue("import_vi", this.inserted + this.updated);
            integrationProcess.update();
        } else
            gs.warn("MSRC transform: can not find the integration process when completing the process: " + this.processId);
    },


    // cache the product lib in the memory to lookup later
    _buildProductLib: function(products) {
        gs.info('build productlib function called');
        if (gs.nil(products))
            return;

        for (var i = 0; i < products.length; i++) {
            var product = products[i];
            if (!gs.nil(product)) {
                var productId = product.ProductID;
                var productName = product.Value;
                this.productLib[productId] = productName;
            }
        }
    },

    // cache the category lib in the memory to lookup later
    _buildProductCategoryLib: function(productCategories) {
        gs.info("build productcategorylib function called");
        for (var i = 0; productCategories && i < productCategories.length; i++) {
            var subBranch = productCategories[i] && productCategories[i].Items;
            for (var j = 0; subBranch && j < subBranch.length; j++) {
                var leaf = subBranch[j];
                var category = leaf.Name;
                for (var k = 0; leaf.Items && k < leaf.Items.length; k++) {
                    var productId = leaf.Items[k] && leaf.Items[k].ProductID;
                    this.productCategoryLib[productId] = category;
                }
            }
        }
    },

    _handleVulnerabilities: function(vulnerabilities, initRel, updateRel, bulletin) {
        try{
        gs.info('handle vulnerability function called with vulnerability : ' + vulnerabilities);
        if (gs.nil(vulnerabilities))
            return;

        for (var i = 0; i < vulnerabilities.length; i++) {

            var vul = vulnerabilities[i];
            gs.info("vulnerability : " + JSON.stringify(vul));
            // insert and get CVE
            var cve = vul.CVE;
            var cveTitle = vul.Title ? vul.Title.Value : "";
            var cveSysId = this._handleCVE(cve);

            // additional data for solution
            var additionalData = "<h3>" + cve + ": " + cveTitle + "</h3>";
            if (!gs.nil(vul.Notes)) {
                var notes = vul.Notes;
                for (var j = 0; j < notes.length; j++) {
                    var note = notes[j];
                    if (note.Title && (note.Title === "Description" || note.Title === "FAQ"))
                        additionalData += note.Value;
                }
            }
            additionalData += "<hr>";

            // upsert and get solution sys_ids
            var solutions = vul.Remediations;
            var solutionSysIds = this._handleSolutionList(solutions, initRel, updateRel, bulletin, vul);

            // batch upsert vulnerability m2m, vulnerability and vulnerability_notes
            this._handleSolVul(cveSysId, solutionSysIds, additionalData, updateRel);
        }
        }catch(e){
            gs.error("Exception in handle vulnerabilities : " + e);
        }
    },

    _placeholderSummary: function(oldSummary, vul) {
        try{
        if ((gs.nil(oldSummary) || oldSummary.startsWith(this.PRECEDING_SUMMARY_MSG)) && !gs.nil(vul.CVE)) {
            return this.SUMMARY_PLACEHOLDER_MSG + vul.CVE;
        } else if (!gs.nil(vul.CVE)) {
            //if CVE-111 was appeneded first to summary and the next CVE to be appended is CVE-11
            //CVE-11 is substring of CVE-111, so adding "," for comparision, comparing "CVE-111," with "CVE-11,"
            if (((oldSummary + ",").indexOf(vul.CVE + ",") == -1) && (oldSummary.startsWith(this.SUMMARY_PLACEHOLDER_MSG))) {
                //Limit the number of CVE's to 12, to restrict the length of summary text
                if (oldSummary.split(',').length < 12)
                    return oldSummary + ", " + vul.CVE;
                else if (oldSummary.startsWith(this.SUMMARY_PLACEHOLDER_MSG + 'ADV')) {
                    if (oldSummary.indexOf(this.SUMMARY_PLACEHOLDER_TRAILING_ADV_MSG) == -1)
                        return oldSummary + this.SUMMARY_PLACEHOLDER_TRAILING_ADV_MSG;
                } else if (oldSummary.indexOf(this.SUMMARY_PLACEHOLDER_TRAILING_MSG) == -1)
                    return oldSummary + this.SUMMARY_PLACEHOLDER_TRAILING_MSG;
            }
        }
        return oldSummary;
        }catch(e){
            gs.error("Exception in placeholdersummary : " + e);
        }
    },

     // dedup and upsert new URLs
     _handleUrls: function(newUrl, oldUrls) {
        if (gs.nil(newUrl))
            return oldUrls;

        // Special case: SN html field specifically parse '=' to be '&#61;'
        // other chars are fine, we need to handle it here
        newUrl = newUrl.replace(/=/g, "&#61;");
        var newUrlHtml = '<a href="' + newUrl + '" rel="nofollow" target="_blank">' + newUrl + '</a>';

        if (gs.nil(oldUrls) || oldUrls.length === 0 || oldUrls.startsWith(this.NO_LINKS_AVAILABLE))
            return newUrlHtml;

        if (oldUrls.indexOf('>' + newUrl + '</a>') == -1)
            return oldUrls + "<br />" + newUrlHtml;
        else
            return oldUrls;
    },

    _typeLib: {
        0: "WORKAROUND",
        1: "MITIGATION",
        2: "VENDOR_FIX",
        3: "NONE_AVAILABLE",
        4: "WILL_NOT_FIX",
        5: "ENTITLEMENT",
    },

    _handleSolution: function(solution, initRel, updateRel, bulletin, vul) {
        try{
        gs.info("handle solution function called");
        if (gs.nil(solution))
            return;

        var url = solution.URL ? solution.URL : null;
        var productIds = solution.ProductID ? solution.ProductID : [];
        var categories = [];
        for (var c = 0; c < productIds.length; c++) {
            var productId = productIds[c];
            var category = this.productCategoryLib[productId];
            if (!gs.nil(category))
                categories.push(category);
        }
        var type = this._typeLib[+solution.Type] || 'NONE_AVAILABLE';
        var restart = solution.RestartRequired ? solution.RestartRequired.Value : null;

        // generate source ID
        var id = solution.Description ? solution.Description.Value : null;
        var description = this.DESC_VALID_LINKS_MSG;
        var summary = "";
        var kbUrlHtml = '';
        // if source ID is not a numeric value
        // we use url as its source ID
        var hasNoId = false;
        if (isNaN(id)) {
            if (gs.nil(url)) {
                // rare case when solution does not have a numeric ID
                // nor a URL, we dedup by description
                // and in this case description is an actual text content
                description = solution.Description ? solution.Description.Value : null;
                hasNoId = true;
            } else {
                id = url;
            }
        } 
        // else {
        //     summary = this._extractSummaryfromKB(id);
        //     if (!gs.nil(summary)) {
        //         //If the solutionID is a number, and we have valid KB (because summary is not nil)
        //         //then, first url in the links field will be the microsoft support kb url
        //         kbUrlHtml = this._handleUrls(this.MICROSOFT_SUPPORT_URL + id);
        //     }

        // }

        var gr = new GlideRecord("sn_vul_solution");
        var solutionSysId, newProdAndCate, newProductSysIds, newProductCategorySysIds;
        if (gr.isValid()) {
            if (this.domain)
                gr.addQuery("sys_domain", this.domain);
            if (hasNoId) {
                //we are doing setValue() and getValue() on glideRecord to get
                //the HTML sanitized value of description text
                var grGetDescription = new GlideRecord("sn_vul_solution");
                grGetDescription.setValue('description', description);
                var descriptionSanitizedHtml = grGetDescription.getValue('description');

                // 'description' -> html text we get from the MSRC json
                // 'descriptionSanitizedHtml' --> the text that gets stored in the 'description' (HTML sanitized) field of solution record
                gr.addQuery("description", descriptionSanitizedHtml);
                gr.addQuery("solution_type", type);
            } else
                gr.addQuery("source_id", id);
            gr.addQuery("source", this.SOURCE);
            gr.query();
            if (gr.next()) {
                // if (!gs.nil(gr.getValue("bulletin")))
                //     bulletin = this.getLatestBulletin(gr.getValue("bulletin"), bulletin);
                gr.setValue("bulletin", bulletin);
                gr.setValue("solution_type", type);
                gr.setValue("date_published", initRel);
                gr.setValue("last_modified", updateRel);
                if (!gs.nil(summary))
                    gr.setValue("summary", summary);
                else {
                    var newSummary = this._placeholderSummary(gr.getValue("summary"), vul);
                    gr.setValue("summary", newSummary);
                }
                if (!gs.nil(description))
                    gr.setValue("description", description);
                if (!gs.nil(restart))
                    gr.setValue("requires_restart", restart.toUpperCase());

                // set value for affected products and product categories
                // var oldProductSysIds = gr.getValue("affected_products") ? gr.getValue("affected_products").split(",") : [];
                // var oldProductCategorySysIds = gr.getValue("product_category") ? gr.getValue("product_category").split(",") : [];
                // newProdAndCate = this._handleSoftwareModel(productIds, oldProductSysIds, categories, oldProductCategorySysIds);
                // newProductSysIds = newProdAndCate.newProductSysIds;
                // newProductCategorySysIds = newProdAndCate.newProductCategorySysIds;
                // gr.setValue("affected_products", newProductSysIds);
                // gr.setValue("product_category", newProductCategorySysIds);

                // set value for urls
                var oldUrls = gr.getValue("urls");
                var newUrls = this._handleUrls(url, oldUrls);
                if (!gs.nil(newUrls))
                    gr.setValue("urls", newUrls);
                gr.update();
                solutionSysId = gr.getUniqueValue();

                // if already inserted and then updated, we consider it is inserted instead of updated
                // the logic here is if it is not an existing insert nor it has been counted as updated before
                // increase update count
                if (!this.insertedLib[solutionSysId] && !this.updatedLib[solutionSysId]) {
                    this.updatedLib[solutionSysId] = true;
                    this.updated++;
                }
            } else {
                gr = new GlideRecord("sn_vul_solution");
                gr.initialize();
                if (this.domain)
                    gr.setValue("sys_domain", this.domain);
                if (!hasNoId)
                    gr.setValue("source_id", id);
                gr.setValue("source", this.SOURCE);
                gr.setValue("bulletin", bulletin);
                gr.setValue("solution_type", type);
                if (!gs.nil(summary)) {
                    gr.setValue("summary", summary);
                    gr.setValue("urls", kbUrlHtml);
                } else {
                    var placeholderSummary = this._placeholderSummary('', vul);
                    gr.setValue("summary", placeholderSummary);
                }
                if (!gs.nil(description))
                    gr.setValue("description", description);
                if (!gs.nil(restart))
                    gr.setValue("requires_restart", restart.toUpperCase());
                // set value for urls
                if (!gs.nil(url)) {
                    //url is appended to KbUrl
                    var urlHtml = this._handleUrls(url, kbUrlHtml);
                    gr.setValue("urls", urlHtml);
                }
                gr.setValue("date_published", initRel);
                gr.setValue("last_modified", updateRel);

                // set value for affected products and categories
                // newProdAndCate = this._handleSoftwareModel(productIds, [], categories, []);
                // newProductSysIds = newProdAndCate.newProductSysIds;
                // newProductCategorySysIds = newProdAndCate.newProductCategorySysIds;
                // gr.setValue("affected_products", newProductSysIds);
                // gr.setValue("product_category", newProductCategorySysIds);
                // gr.setValue("metrics_status", 1);
                solutionSysId = gr.insert();

                // mark it as inserted and increase the count
                this.insertedLib[solutionSysId] = true;
                this.inserted++;
            }
        }

        // handle supercedence (assuming the superseding solution id is a numeric solution ID)
        // NOTE: this is actually a preceding solution
        // var preSolIds = solution.Supercedence ? solution.Supercedence : null;
        // try {
        //     preSolIds = this._processpresolIds(preSolIds);
        // } catch (e) {
        //     gs.warn("[MSRC] Encounter error when processing superceding solution IDs");
        //     throw new Error("[MSRC] Encounter error when processing superceding solution IDs");
        // }
        // for (var i = 0; i < preSolIds.length; i++) {
        //     var preSolId = preSolIds[i];
        //     var preSolSysId;
        //     if (!gs.nil(preSolId) && preSolId !== "None" && !gs.nil(solutionSysId)) {
        //         var presolGr = new GlideRecord("sn_vul_solution");
        //         if (this.domain)
        //             presolGr.addQuery("sys_domain", this.domain);
        //         presolGr.addQuery("source_id", preSolId);
        //         presolGr.addQuery("source", this.SOURCE);
        //         presolGr.query();
        //         var summarypreSol = this.PRECEDING_SUMMARY_MSG + gr.getValue("number");
        //         var descriptionpreSol = this.ORPHANED_DESC_NO_VALID_KB_MSG;

        //         if (presolGr.next()) {
        //             preSolSysId = presolGr.getUniqueValue();
        //             //If summary field is empty 
        //             if (gs.nil(presolGr.getValue('summary'))) {
        //                 presolGr.setValue("summary", summarypreSol);
        //                 presolGr.setValue("description", descriptionpreSol);
        //                 presolGr.update();
        //             }

        //         } else {
        //             // if it does not find an existing preceding solution
        //             // create a placeholder and associate that to the superceding solution in m2m
        //             presolGr = new GlideRecord("sn_vul_solution");
        //             presolGr.initialize();
        //             if (this.domain)
        //                 presolGr.setValue("sys_domain", this.domain);
        //             presolGr.setValue("source_id", preSolId);
        //             presolGr.setValue("source", this.SOURCE);

        //             if (+preSolId) {
        //                 var summaryKB = this._extractSummaryfromKB(preSolId);
        //                 if (!gs.nil(summaryKB)) {
        //                     summarypreSol = summaryKB;
        //                     descriptionpreSol = this.ORPHANED_DESC_VALID_KB_MSG;
        //                     //If the solutionID is a number, and we have valid KB (because summaryKB is not nil)
        //                     //then first url in the links field should be the microsoft support kb url
        //                     kbUrlHtml = this._handleUrls(this.MICROSOFT_SUPPORT_URL + preSolId);
        //                     presolGr.setValue("urls", kbUrlHtml);
        //                 } else
        //                     //No valid KB link for this preceding solution, so populating with placeholder string
        //                     presolGr.setValue("urls", this.NO_LINKS_AVAILABLE);
        //             }

        //             presolGr.setValue("summary", summarypreSol);
        //             presolGr.setValue("description", descriptionpreSol);
        //             presolGr.setValue("metrics_status", 1);
        //             preSolSysId = presolGr.insert();

        //             // mark it as inserted and increase the count
        //             this.insertedLib[preSolSysId] = true;
        //             this.inserted++;
        //         }

        //         if (preSolSysId) {
        //             var m2mGr = new GlideRecord("sn_vul_m2m_solution_supersedence");
        //             if (this.domain)
        //                 m2mGr.addQuery("sys_domain", this.domain);
        //             m2mGr.addQuery("sn_vul_superseding_solution", solutionSysId);
        //             m2mGr.addQuery("sn_vul_solution", preSolSysId);
        //             m2mGr.query();
        //             if (!m2mGr.next()) {
        //                 m2mGr = new GlideRecord("sn_vul_m2m_solution_supersedence");
        //                 if (this.domain)
        //                     m2mGr.setValue("sys_domain", this.domain);
        //                 m2mGr.setValue("sn_vul_superseding_solution", solutionSysId);
        //                 m2mGr.setValue("sn_vul_solution", preSolSysId);
        //                 m2mGr.insert();
        //             }
        //         }
        //     }
        // }

        return solutionSysId;
        }catch(e){
            gs.info("exception in handle solution function : " + e)
        }
    },

    _handleSolutionList: function(solutions, initRel, updateRel, bulletin, vul) {
        var solutionSysIds = [];
        for (var i = 0; i < solutions.length; i++) {
            var solution = solutions[i];
            var solutionSysId = this._handleSolution(solution, initRel, updateRel, bulletin, vul);
            if (!gs.nil(solutionSysId))
                solutionSysIds.push(solutionSysId);
        }
        return solutionSysIds;
    },

    _handleSolVul: function(vulSysId, solutionsSysIds, additionalData, updateRel) {
        try{
        if (gs.nil(solutionsSysIds) || solutionsSysIds.length === 0)
            return;
        gs.info("solutionIDs : " + solutionsSysIds);
        for (var i = 0; i < solutionsSysIds.length; i++) {
            var solSysId = solutionsSysIds[i];

            // if vulnerability prefixed with ADV
            // only update the vulnerability_notes and summary
            if (!gs.nil(vulSysId)) {
                // vulnerability prefixed with CVE
                // insert solution to vul m2m
                // this._insertSolNvdM2m(vulSysId, solSysId, additionalData, updateRel);

                // roll up solution from NVD to third-party vul entry
                // this._rollupSolFromNvdToThirdPartyVul(vulSysId, solSysId);
            } else {
                // update the additional vulnerability info here
                // if it was not attached before
                this._batchUpdateSol(solSysId, additionalData);
            }
        }
        }catch(e){
            gs.error("Exception handleSolvul : " + e);
        }
    },
    
    // batch update solutions with vulnerability_notes, summary and description
    _batchUpdateSol: function(solSysId, additionalData) {
        try{
        var sol = new GlideRecord("sn_vul_solution");
        if (sol.get(solSysId)) {
            // update additional info
            if (!gs.nil(additionalData)) {
                var oldAddInfo = sol.getValue("vulnerability_notes");
                oldAddInfo = oldAddInfo ? oldAddInfo : "";
                sol.setValue("vulnerability_notes", additionalData + oldAddInfo);
            }

            //if there are no links
            var urls = sol.getValue("urls");
            if (gs.nil(urls))
                sol.setValue("urls", this.NO_LINKS_AVAILABLE);

            // if description is empty
            if (!gs.nil(urls) && (gs.nil(sol.getValue("description"))))
                sol.setValue("description", this.DESC_VALID_LINKS_MSG);
            else if (gs.nil(sol.getValue("description")))
                sol.setValue("description", this.DESC_NO_VALID_LINKS_MSG);

            // update
            sol.update();
        }
        }catch(e){
            gs.error("Exception in batchUpdateSol : " + e);
        }
    },

    _handleCVE: function(cve) {
        try{
        if (gs.nil(cve) || cve.startsWith("ADV"))
            return;

        var gr = new GlideRecord("sn_vul_nvd_entry");
        if (this.domain)
            gr.addQuery("sys_domain", this.domain);
        gr.addQuery("id", cve);
        gr.query();
        if (gr.next()) {
            return gr.getUniqueValue();
        } else {
            gr = new GlideRecord("sn_vul_nvd_entry");
            gr.initialize();
            if (this.domain)
                gr.setValue("sys_domain", this.domain);
            gr.setValue("id", cve);
            return gr.insert();
        }
        }catch(e){
            gs.error("Exception in handleCVE" + e);
        }
    },

    type: 'CVRFJSONSolutionProcessor'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-13 05:57:44</sys_created_on>
        <sys_id>779d837307713010568cffa08c1ed041</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>CVRFJSONSolutionProcessor</sys_name>
        <sys_package display_value="CVRF Integration for Security Operations" source="x_440354_cvrf_inte">65c6033f07313010568cffa08c1ed041</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CVRF Integration for Security Operations">65c6033f07313010568cffa08c1ed041</sys_scope>
        <sys_update_name>sys_script_include_779d837307713010568cffa08c1ed041</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-10-14 08:43:57</sys_updated_on>
    </sys_script_include>
</record_update>
